{"version":3,"sources":["logo.svg","App.js","config.js","Components/GithubReactionTextCard/GithubReactionTextCard.js","Containers/BlogPost/BlogPost.js","Components/Header/Header.js","Components/BlogCard/BlogCard.js","Containers/Blogs/Blogs.js","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","App","config","githubConvertedToken","githubUserName","githubRepo","title","subtitle","GithubReactionTextCard","link","console","log","className","href","target","BlogHome","useState","blog","setBlogs","addReaction","setAddreaction","reactionCounter","setReactionCounter","issueNumber","parseInt","window","location","split","pop","getEmojiStringByName","emojiName","useEffect","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","query","gql","then","result","array","data","repository","issue","reactions","reactions_array","forEach","element","obj","by","user","login","emoji","content","push","setReactionFun","nodes","catch","err","error","class","src","author","avatarUrl","moment","updatedAt","format","readingTime","body","minutes","url","options","overrides","a","component","children","props","jsx","pre","language","style","docco","counters","onSelect","githubCounterEmojiSelect","onAdd","Header","BlogCard","lables","setLables","history","useHistory","labels","filter","value","index","name","getLabels","map","key","id","backgroundColor","color","onClick","number","bodyText","Blogs","blogs","issues","v","i","createBrowserHistory","require","Routes","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f96b853a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.048f9aa6.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const config = {\r\n  // Your Github Converted Token To Know How To Get Your Token Look at Readme.md\r\n  githubConvertedToken: \"NmZhYTM1ZWM3YTgzZjgwYmU5ZDRiMDU3NjEwNjQ0ZDViZGExZTQ5ZA==\",\r\n\r\n  //   Your Github UserName\r\n  githubUserName: \"phuocding\",\r\n\r\n  //   Your Github Repo Name Where You Have your issues as Blog\r\n\r\n  githubRepo: \"blog\",\r\n\r\n  // Your Personal Blog Title \r\n\r\n  title : \"Dev's Life\" , \r\n\r\n  // Your Personal Blog Subtitle \r\n\r\n  subtitle : \"Nh·ªØng m·∫©u chuy·ªán nho nh·ªè v·ªÅ t·ªõ\"\r\n  \r\n};\r\n","import React from \"react\";\r\nimport \"./GithubReactionTextCard.css\";\r\n\r\nexport default function GithubReactionTextCard({ link }) {\r\n  console.log(link);\r\n  return (\r\n    <div className=\"reaction-text-github-div\">\r\n      <p>Give your reaction on Github</p>\r\n      <div></div>\r\n      <span>\r\n        <a href={link} target=\"_blank\">\r\n          Github link ‚ö°Ô∏è\r\n        </a>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { gql } from \"apollo-boost\";\r\nimport moment from \"moment\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport readingTime from \"reading-time\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport \"./BlogPost.css\";\r\nimport { config } from \"../../config\";\r\nimport { GithubCounter, GithubSelector } from \"react-reactions\";\r\nimport GithubReactionTextCard from \"../../Components/GithubReactionTextCard/GithubReactionTextCard\";\r\n\r\nexport default function BlogHome() {\r\n  const [blog, setBlogs] = useState([]);\r\n  const [addReaction, setAddreaction] = useState(false);\r\n  const [reactionCounter, setReactionCounter] = useState([]);\r\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\r\n\r\n  useEffect(() => {\r\n    getBlogsFromGithubIssues();\r\n  }, []);\r\n\r\n  function getBlogsFromGithubIssues() {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n          {\r\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\r\n              issue(number: ${issueNumber}) {\r\n                title\r\n                body\r\n                bodyHTML\r\n                url\r\n                bodyText\r\n                number\r\n                bodyHTML\r\n                author {\r\n                  url\r\n                  avatarUrl\r\n                  login\r\n                }\r\n                reactions(first:100){\r\n                  nodes{\r\n                    content\r\n                    user{\r\n                      id\r\n                      login\r\n                    }\r\n                  }\r\n                }\r\n                updatedAt\r\n                id\r\n              }\r\n            }\r\n          }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setBlogsFunction(result.data.repository.issue);\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  function setBlogsFunction(array) {\r\n    setBlogs(array);\r\n    setReactionFun(array.reactions.nodes);\r\n  }\r\n\r\n  function setReactionFun(reactions) {\r\n    // {\r\n    //   emoji: \"üëç\", // String emoji reaction\r\n    //   by: \"case\" // String of persons name\r\n    // }\r\n\r\n    let reactions_array = [];\r\n    reactions.forEach(element => {\r\n      let obj = {\r\n        by: element.user.login,\r\n        emoji: getEmojiStringByName(element.content)\r\n      };\r\n      reactions_array.push(obj);\r\n    });\r\n\r\n    setReactionCounter(reactions_array);\r\n  }\r\n\r\n  function getEmojiStringByName(emojiName) {\r\n    switch (emojiName) {\r\n      case \"THUMBS_UP\":\r\n        return \"üëç\";\r\n\r\n      case \"THUMBS_DOWN\":\r\n        return \"üëé\";\r\n\r\n      case \"LAUGH\":\r\n        return \"üòÑ\";\r\n\r\n      case \"HOORAY\":\r\n        return \"üéâ\";\r\n\r\n      case \"CONFUSED\":\r\n        return \"üòï\";\r\n\r\n      case \"HEART\":\r\n        return \"‚ù§Ô∏è\";\r\n\r\n      case \"ROCKET\":\r\n        return \"üöÄ\";\r\n\r\n      case \"EYES\":\r\n        return \"üëÄ\";\r\n    }\r\n  }\r\n\r\n  function createMarkup() {\r\n    return { __html: blog.bodyHTML };\r\n  }\r\n  const HyperLink = ({ children, ...props }) => (\r\n    <a href={props.href} target=\"_blank\" className=\"blog-post-anchor\">\r\n      {children}\r\n      <style jsx>\r\n        {`\r\n          a {\r\n            color: #484848;\r\n            font-weight: 400;\r\n          }\r\n        `}\r\n      </style>\r\n    </a>\r\n  );\r\n\r\n  const CodeBlock = ({ children }) => (\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {children.props.children}\r\n    </SyntaxHighlighter>\r\n  );\r\n\r\n  function githubCounterEmojiSelect(emoji) {\r\n    console.log(emoji);\r\n  }\r\n\r\n  function githubCounterAddReaction() {\r\n    setAddreaction(!addReaction);\r\n  }\r\n  function onEmojiSelect(emoji) {\r\n    console.log(emoji);\r\n  }\r\n  return (\r\n    <div>\r\n      {blog.title && (\r\n        <div className=\"blog-view\">\r\n          <h1 className=\"blog-title\">{blog.title}</h1>\r\n          <div>\r\n            <div className=\"author-details\">\r\n              <img class=\"avatar\" src={blog.author.avatarUrl}></img>\r\n              <div>\r\n                <p className=\"author-name\">{blog.author.login}</p>\r\n                <p className=\"blog-date\">\r\n                  {moment(blog.updatedAt).format(\"DD MMM YYYY\")} . {readingTime(blog.body).minutes} Min Read . <a href={blog.url} target=\"_black\">View On Github</a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Markdown\r\n            options={{\r\n              overrides: {\r\n                a: {\r\n                  component: HyperLink\r\n                },\r\n                pre: {\r\n                  component: CodeBlock\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {blog.body}\r\n          </Markdown>\r\n          {addReaction && (\r\n            <span className=\"reaction-github-emoji anim-scale-in\">\r\n              {/* <GithubSelector onSelect={emoji => onEmojiSelect(emoji)} /> */}\r\n              <GithubReactionTextCard link={blog.url}/>\r\n            </span>\r\n          )}\r\n          <GithubCounter counters={reactionCounter} onSelect={emoji => githubCounterEmojiSelect(emoji)} onAdd={() => githubCounterAddReaction()} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport {config} from \"../../config\"\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"main-header\">\r\n        <div className=\"wrap-big\">\r\n            <h1 className=\"header-title\">{config.title}</h1>\r\n            <h2 className=\"header-subtitle\">{config.subtitle}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./BlogCard.css\";\r\nimport readingTime from \"reading-time\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { get } from \"https\";\r\n\r\nexport default function BlogCard({ blog }) {\r\n  const [lables, setLables] = useState([]);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getLabels();\r\n  }, []);\r\n\r\n  function openBlog(title, number) {\r\n    history.push(`/blog/${title}/${number}`);\r\n  }\r\n\r\n  function getLabels() {\r\n    const lables = blog.labels.nodes.filter((value, index) => {\r\n      return value.name != \"blog\";\r\n    });\r\n    setLables(lables);\r\n  }\r\n  return (\r\n    <div className=\"blog-card-div\">\r\n      <div className=\"blog-card-header\">\r\n        <div>\r\n          {lables.map(value => {\r\n            return (\r\n              <div key={value.id} className=\"blog-catgeory\" style={{ backgroundColor: `#${value.color}` }}>\r\n                {value.name}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div>\r\n          <p className=\"reading-time\">{readingTime(blog.body).minutes} Min Read</p>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className=\"blog-card-title\">\r\n          <h2 onClick={() => openBlog(blog.title, blog.number)}>{blog.title}</h2>\r\n        </div>\r\n        <div className=\"blog-card-description\">\r\n          <p>\r\n            {blog.bodyText}\r\n          </p>\r\n        </div>\r\n        <div className=\"blog-card-footer\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { gql } from \"apollo-boost\";\r\nimport BlogHome from \"../BlogPost/BlogPost\";\r\nimport Header from \"../../Components/Header/Header\";\r\nimport BlogCard from \"../../Components/BlogCard/BlogCard\";\r\nimport { config } from \"../../config\";\r\n\r\nfunction Blogs() {\r\n  const [blogs, setBlogs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getBlogsFromGithubIssues();\r\n  }, []);\r\n\r\n  function getBlogsFromGithubIssues() {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n          {\r\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\r\n              issues(first: 100, states: OPEN, filterBy: { labels: \"blog\" }) {\r\n                nodes {\r\n                  title\r\n                  body\r\n                  bodyHTML\r\n                  bodyText\r\n                  number\r\n                  labels(first: 100) {\r\n                    nodes {\r\n                      color\r\n                      name\r\n                      id\r\n                    }\r\n                  }\r\n                  author {\r\n                    url\r\n                    avatarUrl\r\n                    login\r\n                  }\r\n                  updatedAt\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setBlogsFunction(result.data.repository.issues.nodes);\r\n      });\r\n  }\r\n\r\n  function setBlogsFunction(array) {\r\n    setBlogs(array);\r\n  }\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"blog-div-main\">\r\n        {blogs.map((v, i) => {\r\n          return <BlogCard blog={v} key={i} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport App from \"./App\"\r\nimport Blogs from \"./Containers/Blogs/Blogs\"\r\nimport BlogHome from \"./Containers/BlogPost/BlogPost\";\r\n\r\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\r\nconst history = createBrowserHistory();\r\n\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Blogs} /> \r\n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogHome}/>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routes from './Routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Routes />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}